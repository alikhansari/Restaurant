<?php/* Class Users include * 23 Mehr 94 - Yazd University * 9130403 - Ali Khodabakhshian */class User{    public $id;    public $username;    public $name;    public $password;    public $email;    public $credit;    public $sex;    public $phone;    public $address;    private function CheckDuplicateEmailUsername($type,$value)    {        $db = new Database();        $db->query("SELECT active FROM tbl_user WHERE $type = ?");        $db->bind(1,$value);        $db->execute();        if($db->rowCount() > 0)            return false;        return true;    }    private function CheckCurrentPassword ($id,$password)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE password = ? AND id = ?");        $db->bind(1,$password);        $db->bind(2,$id);        $db->execute();        if($db->rowCount() == 1)            return true;        return false;    }    private function CheckDuplicateUsername ($id,$username)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE username = ? AND id != ?");        $db->bind(1,$username);        $db->bind(2,$id);        $db->execute();        if ($db->rowCount() > 0)        {            return false;        }        else            return true;    }    private function CheckDuplicateEmail ($id,$email)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE email = ? AND id != ?");        $db->bind(1,$email);        $db->bind(2,$id);        $db->execute();        if ($db->rowCount() > 0)        {            return false;        }        else            return true;    }    public function PrintUserAsComplete ()    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE active = '1'");        $db->execute();        $dname_list = array();        foreach ($db->resultset() as $row) {            $dname_list[] = $row['username'];        }        echo json_encode($dname_list);    }    public function __construct()    {        if(isset($_COOKIE['username']))            $this->username = $_COOKIE['username'];        if(isset($_COOKIE['id']))            $this->id = $_COOKIE['id'];        if(isset($_COOKIE['id']))        {            $result = $this->FetchUserInfo($_COOKIE['id']);            $this->name = $result['name'];            $this->email = $result['email'];        }        $credit = new Credits();        $this->credit = $credit->CurrentCredit();        $this->ip = $_SERVER['REMOTE_ADDR'];    }    private function FetchUserByEmail ($email)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE email = ?");        $db->bind(1,$email);        $db->execute();        if($db->rowCount() == 1)            return true;        else            return false;    }    public function RememberPassword()    {        require("language.php");        if(isset($_GET['password']) && isset($_GET['name']) && isset($_GET['id']))        {            $set = new Settings();            $password = $set->Check_Param($_GET['password']);            $id = $set->Check_Param($_GET['id']);            $username = $set->Check_Param($_GET['name']);            if(!is_numeric($id) || intval($id) < 1)            {                header("location: index.php");            }            else            {                $db = new Database();                $db->query("SELECT * FROM tbl_user WHERE id = ? AND username = ? AND password != ?");                $db->bind(1,$id);                $db->bind(2,$username);                $db->bind(3,$password);                $db->execute();                if($db->rowCount() == 1)                {                    $d = new Database();                    $d->query("UPDATE tbl_user SET password = ? WHERE id = ? AND username = ?");                    $d->bind(1,$password);                    $d->bind(2,$id);                    $d->bind(3,$username);                    $d->execute();                    return $str['Your_password_changed'];                }                else                {                    header("location: index.php");                }            }        }        elseif(isset($_POST['remember']))        {            if(empty($_POST['username']) || empty($_POST['email']))            {                return $str['error_message_empty'];            }            else            {                $set = new Settings();                $result = $this->FetchUserInfoByUsername($set->Check_Param($_POST['username']));                if($result != false && $this->FetchUserByEmail($_POST['email']) != false)                {                    $n_password =  $set->RandomPassword();                    $pageURL = (@$_SERVER["HTTPS"] == "on") ? "https://" : "http://";                    if ($_SERVER["SERVER_PORT"] != "80")                    {                        $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];                    }                    else                    {                        $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];                    }                    $url = $pageURL;                    $username = $result['username'];                    $user_id = $result['id'];                    $c_password = $set->HashCode($n_password);                    $url = $url."?password=$c_password&id=$user_id&name=$username";                    $message_send = $str['your_new_password_is']." ".$n_password." ".$str['please_copy_the_address_on_your_browser_and_then_go'].": ".$url." ,".$set->GetSettings(1);                    $headers =                        'From: '.$set->GetSettings(4)."\r\n".                        'Reply-To: '.$set->GetSettings(4)."\r\n" .                        'X-Mailer: PHP/'.phpversion();                    @mail($result['email'], $str['remember'], $message_send, $headers);                    return $str['we_sent_you_an_email_for_change_password_please_click_on_the_link_to_changing'];                }                else                {                    return $str['not_found'];                }            }        }        return null;    }    public function CheckUserIsActive ()    {        $result = $this->FetchUserInfo($_COOKIE['id']);        if ($result['active'] == 1)            return true;        return false;    }    public function ChangeCreditUesr ($id,$credit)    {        $d1 = new Database();        $d1->query("UPDATE tbl_user SET credit = ? WHERE id = ?");        $d1->bind(1,$credit);        $d1->bind(2,$id);        $d1->execute();    }    public function UserList ()    {        $db = new Database();        $db->query("SELECT * FROM tbl_user");        $db->execute();        return $db->resultset();    }    public function RegisterUser ()    {        require("language.php");        if (isset($_POST['register']))        {            if (empty($_POST['username2']) || empty($_POST['name']) || empty($_POST['phone']) || empty($_POST['password2']) ||empty($_POST['address']) || empty($_POST['re_password']) || empty($_POST['gender'])) {                return $str['error_message_empty'];            }            else            {                if ($_POST['password2'] != $_POST['re_password'])                {                    return $str['password_does_not_match'];                }                if(!is_numeric($_POST['phone']))                {                    return $str['phone_number_is_not_valid'];                }                if(strlen($_POST['phone']) != 10)                {                    return $str['phone_number_is_not_valid'];                }                $set = new Settings();                $this->username = $set->Check_Param($_POST['username2']);                $this->name = $set->Check_Param($_POST['name']);                $this->password = $set->HashCode($set->Check_Param($_POST['password2']));                $this->email = $set->Check_Param($_POST['email']);                $this->address = $set->Check_Param($_POST['address']);                $this->phone = $set->Check_Param($_POST['phone']);                switch ($_POST['gender'])                {                    case 1:                        $this->sex = 1;                        break;                    case 2:                        $this->sex = 2;                        break;                }                if (!$this->CheckDuplicateEmailUsername("username", $this->username))                {                    return $str['duplicate_error_username'];                }                if (!$this->CheckDuplicateEmailUsername("email", $this->email))                {                    return $str['duplicate_error_email_user'];                }                $db = new Database();                $db->query("INSERT INTO tbl_user (username,name,password,email,user_address,ip,sex,phone) VALUES  (?,?,?,?,?,?,?,?)");                $db->bind(1,$this->username);                $db->bind(2,$this->name);                $db->bind(3,$this->password);                $db->bind(4,$this->email);                $db->bind(5,$this->address);                $db->bind(6,$this->ip);                $db->bind(7,$this->sex);                $db->bind(8,$this->phone);                if ($db->execute())                    header("Location: register.php?result=successfully");                else                    die("Error");            }            return null;        }        return null;    }    public function FetchUserInfo($id)    {        if (is_numeric($id))        {            $db = new Database();            $db->query("SELECT * FROM tbl_user WHERE id = ?");            $db->bind(1,$id);            $db->execute();            if($db->rowCount() == 1)                return $db->single();            else                return false;        }        else            die("Error!");    }    public function FetchUserInfoByUserId($id)    {        if (is_numeric($id))        {            $db = new Database();            $db->query("SELECT * FROM tbl_user WHERE id = ?");            $db->bind(1,$id);            $db->execute();            if($db->rowCount() == 1)                return $db->single();            else                return false;        }        else            return false;    }    public function FetchUserInfoByUsername($username)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE username = ?");        $db->bind(1,$username);        $db->execute();        if($db->rowCount() == 1)            return $db->single();        else            return false;    }    public function UpdateOrderNumbersOfUser($user_id)    {        $result = $this->FetchUserInfo($user_id);        $order_numbers = $result['order_numbers'];        $order_numbers=$order_numbers+1;        $db = new Database();        $db->query("UPDATE tbl_user SET order_numbers = ? WHERE id = ?");        $db->bind(1,$order_numbers);        $db->bind(2,$user_id);        if($db->execute())            return true;        else            return false;    }    public function EditUser ()    {        require("language.php");        $set = new Settings();        if(isset($_POST['edit']))        {            if (empty($_POST['name']) || empty($_POST['phone']) ||empty($_POST['gender']) || empty($_POST['email']))            {                return $str['error_message_empty'];            }            else            {                $this->name = $set->Check_Param($_POST['name']) ;                $this->email = $set->Check_Param($_POST['email']);                $this->id = $_COOKIE['id'];                if(!$this->CheckDuplicateEmail($this->id,$this->email))                {                    return $str['duplicate_error_email_user'];                }                switch($_POST['gender'])                {                    case 2:                        $this->sex = 0;                        break;                    case 1:                        $this->sex = 1;                        break;                }                if(!is_numeric($_POST['phone']))                {                    return $str['phone_number_is_not_valid'];                }                if(strlen($_POST['phone']) != 10)                {                    return $str['phone_number_is_not_valid'];                }                $this->phone = $set->Check_Param($_POST['phone']);                if((empty($_POST['password']) && !empty($_POST['new_password'])) || (!empty($_POST['password']) && empty($_POST['new_password'])))                {                    return $str['password_newpassword_is_empty'];                }                elseif(!empty($_POST['password']) && !empty($_POST['new_password']))                {                    $this->password = $set->HashCode($set->Check_Param($_POST['password']));                    if($this->CheckCurrentPassword($this->id,$this->password))                    {                        $this->password = $set->HashCode($set->Check_Param($_POST['new_password']));                        $db = new Database();                        $db->query("UPDATE tbl_user SET name = ?, sex = ?, user_address = ?, email = ?, password = ?, phone = ?  WHERE id = ?");                        $db->bind(1,$this->name);                        $db->bind(2,$this->sex);                        $db->bind(3,$this->address);                        $db->bind(4,$this->email);                        $db->bind(5,$this->password);                        $db->bind(6,$this->phone);                        $db->bind(7,$this->id);                        if($db->execute())                            return $str['user_password_inforamtion_changed_successfully'];                        return "Error!";                    }                    else                    {                        return $str['password_incorrect'];                    }                }                else                {                    $db = new Database();                    $db->query("UPDATE tbl_user SET name = ?, sex = ?, user_address = ?, email = ?, phone = ? WHERE id = ?");                    $db->bind(1,$this->name);                    $db->bind(2,$this->sex);                    $db->bind(3,$this->address);                    $db->bind(4,$this->email);                    $db->bind(5,$this->phone);                    $db->bind(6,$this->id);                    if($db->execute())                        return $str['user_information_changed_successfully'];                    return "Error!";                }            }        }        return null;    }    /*     *     * Settings For admin area is here     *     *     */    private function SearchUsernameAdmin ($username)    {        $db  = new Database();        $db->query("SELECT * FROM tbl_user WHERE username LIKE ?");        $username = $username."%";        $db->bind(1,$username);        $db->execute();        if($db->rowCount() > 0)            return $db->resultset();        else            return false;    }    private function IsNumberValid($number)    {        if(is_numeric($number))        {            if(intval($number)>0)            {                return true;            }            else            {                return false;            }        }        else        {            return false;        }    }    private function SearchIdAdmin ($id)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE id = ?");        $db->bind(1,$id);        $db->execute();        if($db->rowCount() > 0)            return $db->single();        else            return false;    }    private function SearchIdAdmin2 ($id)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE id = ?");        $db->bind(1,$id);        $db->execute();        if($db->rowCount() > 0)            return $db->resultset();        else            return false;    }    private function SearchEmailAdmin ($email)    {        $db  = new Database();        $db->query("SELECT * FROM tbl_user WHERE email LIKE ?");        $email = $email."%";        $db->bind(1,$email);        $db->execute();        if($db->rowCount() > 0)            return $db->resultset();        else            return false;    }    private function SearchNameAdmin ($name)    {        $db  = new Database();        $db->query("SELECT * FROM tbl_user WHERE name LIKE ?");        $name = $name."%";        $db->bind(1,$name);        $db->execute();        if($db->rowCount() > 0)            return $db->resultset();        else            return false;    }    public function SearchUsernameAdmin_e ($username)    {        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE username = ?");        $db->bind(1,$username);        $db->execute();        if($db->rowCount() > 0)            return $db->single();        else            return false;    }    private function SearchAddressAdmin ($address)    {        $db  = new Database();        $db->query("SELECT * FROM tbl_user WHERE user_address LIKE ?");        $address = $address."%";        $db->bind(1,$address);        $db->execute();        if($db->rowCount() > 0)            return $db->resultset();        else            return false;    }    private function SearchCreditMoreThanAdmin ($amount)    {        if(is_numeric($amount))        {            if(intval($amount) >= 0)            {                $db = new Database();                $db->query("SELECT * FROM tbl_user WHERE credit > ?");                $db->bind(1,$amount);                $db->execute();                if($db->rowCount() > 0)                    return $db->resultset();                else                    return false;            }            else                return false;        }        else            return false;    }    private function SearchCreditLessThanAdmin ($amount)    {        if(is_numeric($amount))        {            if(intval($amount) >= 0)            {                $db = new Database();                $db->query("SELECT * FROM tbl_user WHERE credit < ?");                $db->bind(1,$amount);                $db->execute();                if($db->rowCount() > 0)                    return $db->resultset();                else                    return false;            }            else                return false;        }        else            return false;    }    private function SearchCreditEqualAdmin ($amount)    {        if(is_numeric($amount))        {            if(intval($amount) >= 0)            {                $db = new Database();                $db->query("SELECT * FROM tbl_user WHERE credit = ?");                $db->bind(1,$amount);                $db->execute();                if($db->rowCount() > 0)                    return $db->resultset();                else                    return false;            }            else                return false;        }        else            return false;    }    private function FetchUsersIsOrIsNotActive ($type)    {        if($type)            $type = "=";        elseif(!$type)            $type = "!=";        $db = new Database();        $db->query("SELECT * FROM tbl_user WHERE active $type '1'");        $db->execute();        if($db->rowCount() > 0)        {            return $db->resultset();        }        else        {            return false;        }    }    public function GetUserCount ()    {        $db = new Database();        $db->query("SELECT * FROM tbl_user");        $db->execute();        return $db->rowCount();    }    public function SearchUserAdmin ()    {        /*         * IS NOT FILL => ERROR 0         * IS NOT FOUND => ERROR 1         * HAS RESULT => ERROR 2         1:=username         2:=id         3:=email         4:=name         6:=address         7:=credit more than         8:=credit less than         9:=credit is equal         */        require("language.php");        $arr = array();        if(isset($_POST['SEARCH_USER']))        {            if(!isset($_POST['INPUT_SEARCH']) || !isset($_POST['TYPE']))            {                return array(null,$str['error_message_empty']);            }            else            {                $set = new Settings();                $search = $set->Check_Param(($_POST['INPUT_SEARCH']));                switch($_POST['TYPE'])                {                    case 1:                        $arr = $this->SearchUsernameAdmin($search);                        break;                    case 2:                        $arr = $this->SearchIdAdmin2($search);                        break;                    case 3:                        $arr = $this->SearchEmailAdmin($search);                        break;                    case 4:                        $arr = $this->SearchNameAdmin($search);                        break;                    case 6:                        $arr = $this->SearchAddressAdmin($search);                    break;                    case 7:                        $arr = $this->SearchCreditMoreThanAdmin($search);                    break;                    case 8:                        $arr = $this->SearchCreditLessThanAdmin($search);                    break;                    case 9:                        $arr = $this->SearchCreditEqualAdmin($search);                    break;                }                switch ($arr)                {                    case (false):                        return array($arr,$str['not_found']);                        break;                    default:                        return array($arr,$str['result_is']);                }            }        }        return array(null,null);    }    public function AddUserAdmin()    {        require("language.php");        if(isset($_POST['ADD_USER']))        {            if(empty($_POST['username']) || empty($_POST['phone']) || empty($_POST['password']) || empty($_POST['address']) || empty($_POST['name']) || empty($_POST['email']) || empty($_POST['gender']))            {                return $str['error_message_empty'];            }            else            {                $set = new Settings();                $username = $set->Check_Param($_POST['username']);                $email = $set->Check_Param($_POST['email']);                if(!is_numeric($_POST['phone']))                {                    return $str['phone_number_is_not_valid'];                }                if(strlen($_POST['phone']) != 10)                {                    return $str['phone_number_is_not_valid'];                }                $this->phone = $set->Check_Param($_POST['phone']);                $password = $set->HashCode($set->Check_Param($_POST['password']));                $name = $set->Check_Param($_POST['name']);                if (!$this->CheckDuplicateEmailUsername("username", $username))                {                    return $str['duplicate_error_username'];                }                if (!$this->CheckDuplicateEmailUsername("email", $email))                {                    return $str['duplicate_error_email_user'];                }                if(!empty($_POST['address']))                {                    $address = $set->Check_Param($_POST['address']);                }                else                {                    $address = null;                }                switch($_POST['gender'])                {                    case 1:                        $sex = 1;                        break;                    case 2:                        $sex = 0;                        break;                }                $db = new Database();                $db->query("INSERT INTO tbl_user (name,username,password,email,sex,user_address,ip,phone) VALUES  (? , ? , ? , ? , ? , ? , ? , ?) ");                $db->bind(1,$name);                $db->bind(2,$username);                $db->bind(3,$password);                $db->bind(4,$email);                $db->bind(5,$sex);                $db->bind(6,$address);                $db->bind(7,$this->ip);                $db->bind(8,$this->phone);                $db->execute();                return $str['user_add_successfully'];            }        }        return false;    }    public function EditUserAdmin ()    {        require("language.php");        if(isset($_POST['EDIT_USER']))        {            if(isset($_GET['edit']))            {                $id = $_GET['edit'];                if($this->IsNumberValid($id))                {                    $flag = false; // means password filed is empty                    $arr = array();                    if(!isset($_POST['name']) || !isset($_POST['username']) || !isset($_POST['address']) || !isset($_POST['phone']) || !isset($_POST['ip']) || !isset($_POST['email']) || !isset($_POST['order_numbers']) ||  !isset($_POST['credit']) ||  !isset($_POST['active']) || !isset($_POST['regtime']) || !isset($_POST['gender']))                    {                        $arr['message'] = $str['error_message_empty'];                        return $arr;                    }                    if(isset($_POST['password']))                    {                        if(!empty($_POST['password']))                        {                            $flag = true;                        }                    }                    $set = new Settings();                    $id = $_GET['edit'];                    $username = $set->Check_Param($_POST['username']);                    $email = $set->Check_Param($_POST['email']);                    if(!is_numeric($_POST['phone']))                    {                        $arr['message'] = $str['phone_number_is_not_valid'];                        return $arr;                    }                    if(strlen($_POST['phone']) != 10)                    {                        $arr['message'] =  $str['phone_number_is_not_valid'];                        return $arr;                    }                    $this->phone = $set->Check_Param($_POST['phone']);                    if(!$this->CheckDuplicateUsername($id,$username))                    {                        $arr['message'] = $str['duplicate_error_username_user'];                        return $arr;                    }                    if(!$this->CheckDuplicateEmail($id,$email))                    {                        $arr['message'] = $str['duplicate_error_email_user'];                        return $arr;                    }                    switch($_POST['gender'])                    {                        case 1:                            $sex = 1;                            break;                        case 2:                            $sex = 0;                            break;                    }                    switch($_POST['active'])                    {                        case 1:                            $active = 1;                            break;                        case 2:                            $active = 0;                            break;                    }                    $user_address = $set->Check_Param($_POST['user_address']);                    $name = $set->Check_Param($_POST['name']);                    if($flag)                    {                        $password = $set->HashCode($set->Check_Param($_POST['password']));                        $db = new Database();                        $db->query("UPDATE tbl_user SET username = ?,  name =  ?, email = ?, active = ?, sex = ?, user_address = ?, password = ?, phone = ?  WHERE id = ?");                        $db->bind(1,$username);                        $db->bind(2,$name);                        $db->bind(3,$email);                        $db->bind(4,$active);                        $db->bind(5,$sex);                        $db->bind(6,$user_address);                        $db->bind(7,$password);                        $db->bind(8,$this->phone);                        $db->bind(9,$id);                        $db->execute();                        $arr['message'] = $str['edit_information_password_successfully'];                    }                    else                    {                        $db = new Database();                        $db->query("UPDATE tbl_user SET username = ?,  name =  ?, email = ?, active = ?, sex = ?, user_address = ? , phone = ? WHERE id = ?");                        $db->bind(1,$username);                        $db->bind(2,$name);                        $db->bind(3,$email);                        $db->bind(4,$active);                        $db->bind(5,$sex);                        $db->bind(6,$user_address);                        $db->bind(7,$this->phone);                        $db->bind(8,$id);                        $db->execute();                        $arr['message'] = $str['edit_information_successfully'];                    }                    return $arr;                }                else                {                    header("Location: users.php");                }            }            else            {                header("Location: users.php");            }        }        elseif(isset($_GET['edit']))        {            $id = $_GET['edit'];            if($this->IsNumberValid($id))            {                if($this->FetchUserInfo($id) != false)                {                    return $this->FetchUserInfo($id);                }                else                {                    header("Location: users.php");                }            }            else            {                header("Location: users.php");            }        }        else        {            header("Location: users.php");        }    }    public function LogUserAmdin ()    {        require("language.php");        if(isset($_POST['SEARCH']))        {            if(isset($_POST['INPUT_SEARCH']))            {                if(!empty($_POST['INPUT_SEARCH']))                {                    $set = new Settings();                    $search = $set->Check_Param($_POST['INPUT_SEARCH']);                    $f1 = $this->SearchIdAdmin($search);                    $f2 = $this->SearchUsernameAdmin_e($search);                    if ($f1 == false && $f2 != false)                    {                        return array($f2,true);                    }                    elseif($f1 != false && $f2 == false)                    {                        return array($f1,true);                    }                    elseif ($f1 != false && $f2 != false)                    {                        return array($f1,true);                    }                    elseif($f1 == false && $f2 == false)                    {                        return array(null,$str['not_found']);                    }                }                else                {                    return array(null,$str['error_message_empty']);                }            }            else            {                return array(null,$str['error_message_empty']);            }        }        else            return 0;    }    public function DeleteUserAdmin()    {        /*        *        * return (db,deleted,IsCorrect Method,found)        *        */        if(isset($_POST['DELETE_USER']))        {            if(isset($_GET['delete']))            {                $id = $_GET['delete'];                if(!$this->IsNumberValid($id))                {                    header("Location: users.php");                }                else                {                    header("refresh:5;url=users.php");                    $db = new Database();                    $db->query("DELETE FROM tbl_user WHERE id = ?");                    $db->bind(1,$id);                    $db->execute();                    return array(null,true,false,false);                }            }        }        elseif(isset($_GET['delete']))        {            $id = $_GET['delete'];            if(!$this->IsNumberValid($id))            {                header("Location: users.php");            }            else            {                $db = new Database();                $db->query("SELECT * FROM tbl_user WHERE id = ?");                $db->bind(1,$id);                $db->execute();                if($db->rowCount() > 0)                    return array($db->single(),false,true,true);                else                    return array(null,false,true,false);            }        }    }    public function ActivateOrDeactivateUsersAdmin ($type)    {        /*         *         * return(IsFound,db,type);         *         */        $actives = $this->FetchUsersIsOrIsNotActive(false);        $nonactive = $this->FetchUsersIsOrIsNotActive(true);        switch($type)        {            case true:                if(isset($_POST['ACTIVATE_USER']))                {                    if(!empty($_POST['check_list']))                    {                        foreach ($_POST['check_list'] as $result) {                            $db1 = new Database();                            $db1->query("UPDATE tbl_user SET active = '1' WHERE id = ?");                            $db1->bind(1,$result);                            $db1->execute();                            $address = $_SERVER['PHP_SELF'];                            header("Location: $address");                        }                    }                }                if($actives == false)                    return array(false,null);                else                    return array(true,$actives);                break;            case false:                if(isset($_POST['DEACTIVATE_USER']))                {                    if(!empty($_POST['check_list']))                    {                        foreach ($_POST['check_list'] as $result) {                            $db1 = new Database();                            $db1->query("UPDATE tbl_user SET active = '0' WHERE id = ?");                            $db1->bind(1,$result);                            $db1->execute();                            $address = $_SERVER['PHP_SELF'];                            header("Location: $address");                        }                    }                }                if($nonactive == false)                    return array(false,null);                else                    return array(true,$nonactive);                break;        }    }}